// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TOrderDao is the data access object for table t_order.
type TOrderDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns TOrderColumns // columns contains all the column names of Table for convenient usage.
}

// TOrderColumns defines and stores column names for table t_order.
type TOrderColumns struct {
	Id            string // 唯一自增ID
	OrderId       string // 订单id
	MasseurId     string // 服务id
	UserId        string // 用户id
	ServiceTime   string // 预约服务时间
	UserName      string // 联系人（客户）
	Phone         string // 联系电话（客户）
	VirtualPhone  string // 虚拟电话
	Address       string // 地址
	Lat           string // 用户纬度
	Lnt           string // 用户经度
	TrafficType   string // 交通方式,0出租1公交
	Distance      string // 距离,单位km
	CancelReason  string // 取消原因
	Remark        string // 订单备注
	TotalMoney    string // 订单金额（分）
	CarMoney      string // 出行费
	ServiceMoney  string // 项目总价
	CouponId      string // 使用的优惠券
	CouponMoney   string // 优惠券的金额
	PayType       string // 支付方式0余额支付1汇付宝支付
	PayTime       string // 支付时间
	Status        string // 订单状态
	SignPic       string // 签字确认图片
	TechComment   string // 技师是否评论
	UserComment   string // 用户是否评论
	UserComplaint string // 用户是否投诉
	Enabled       string //
	CreatedTime   string // 创建时间
	ModifiedTime  string // 更新时间
}

// tOrderColumns holds the columns for table t_order.
var tOrderColumns = TOrderColumns{
	Id:            "id",
	OrderId:       "order_id",
	MasseurId:     "masseur_id",
	UserId:        "user_id",
	ServiceTime:   "service_time",
	UserName:      "user_name",
	Phone:         "phone",
	VirtualPhone:  "virtual_phone",
	Address:       "address",
	Lat:           "lat",
	Lnt:           "lnt",
	TrafficType:   "traffic_type",
	Distance:      "distance",
	CancelReason:  "cancel_reason",
	Remark:        "remark",
	TotalMoney:    "total_money",
	CarMoney:      "car_money",
	ServiceMoney:  "service_money",
	CouponId:      "coupon_id",
	CouponMoney:   "coupon_money",
	PayType:       "pay_type",
	PayTime:       "pay_time",
	Status:        "status",
	SignPic:       "sign_pic",
	TechComment:   "tech_comment",
	UserComment:   "user_comment",
	UserComplaint: "user_complaint",
	Enabled:       "enabled",
	CreatedTime:   "created_time",
	ModifiedTime:  "modified_time",
}

// NewTOrderDao creates and returns a new DAO object for table data access.
func NewTOrderDao() *TOrderDao {
	return &TOrderDao{
		group:   "default",
		table:   "t_order",
		columns: tOrderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TOrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TOrderDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TOrderDao) Columns() TOrderColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TOrderDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TOrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TOrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
