// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TMasseurDao is the data access object for table t_masseur.
type TMasseurDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns TMasseurColumns // columns contains all the column names of Table for convenient usage.
}

// TMasseurColumns defines and stores column names for table t_masseur.
type TMasseurColumns struct {
	Id             string // 自增ID
	MasseurId      string // 用户唯一Id
	Name           string // 真实姓名
	Sex            string // 0未知1男2女
	NickName       string // 对外昵称
	Desc           string // 描述
	Phone          string // 手机号
	Openid         string // openid
	WxId           string // 微信号
	Balance        string // 账户余额（分）
	DrawMoney      string // 可提现金额（分）
	Points         string // 积分
	Level          string // 等级
	Score          string // 评分
	City           string // 城市（地区代码）,默认重庆
	AcceptTime     string // 可预约时间1为可接单 0表示不接单 2表示已预约
	SystemStop     string // 是否系统停牌 0否1是
	AutoLocation   string // 自动更新地理位置 0否1是
	Lat            string // 纬度
	Lnt            string // 经度
	BusinessAbbrev string // 营业执照简称（4个字）
	BusinessName   string // 营业执照全称
	BusinessPic    string // 营业执照图片
	IdCard         string // 身份证号码
	ProfessionPic  string // 职业照
	LifePic        string // 生活照
	UnionId        string // 微信unionId
	CreatedTime    string // 创建时间
	ModifiedTime   string // 更新时间
}

// tMasseurColumns holds the columns for table t_masseur.
var tMasseurColumns = TMasseurColumns{
	Id:             "id",
	MasseurId:      "masseur_id",
	Name:           "name",
	Sex:            "sex",
	NickName:       "nick_name",
	Desc:           "desc",
	Phone:          "phone",
	Openid:         "openid",
	WxId:           "wx_id",
	Balance:        "balance",
	DrawMoney:      "draw_money",
	Points:         "points",
	Level:          "level",
	Score:          "score",
	City:           "city",
	AcceptTime:     "accept_time",
	SystemStop:     "system_stop",
	AutoLocation:   "auto_location",
	Lat:            "lat",
	Lnt:            "lnt",
	BusinessAbbrev: "business_abbrev",
	BusinessName:   "business_name",
	BusinessPic:    "business_pic",
	IdCard:         "id_card",
	ProfessionPic:  "profession_pic",
	LifePic:        "life_pic",
	UnionId:        "union_id",
	CreatedTime:    "created_time",
	ModifiedTime:   "modified_time",
}

// NewTMasseurDao creates and returns a new DAO object for table data access.
func NewTMasseurDao() *TMasseurDao {
	return &TMasseurDao{
		group:   "default",
		table:   "t_masseur",
		columns: tMasseurColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TMasseurDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TMasseurDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TMasseurDao) Columns() TMasseurColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TMasseurDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TMasseurDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TMasseurDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
