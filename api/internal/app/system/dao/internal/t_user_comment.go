// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TUserCommentDao is the data access object for table t_user_comment.
type TUserCommentDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns TUserCommentColumns // columns contains all the column names of Table for convenient usage.
}

// TUserCommentColumns defines and stores column names for table t_user_comment.
type TUserCommentColumns struct {
	Id           string // 唯一自增ID
	UserId       string // 用户id
	MasseurId    string // 技师id
	OrderId      string // 订单id
	Score        string // 星级1-5星
	Label        string // 标签
	Content      string // 评论内容
	IsAppeal     string // 是否申诉0否1是
	Enabled      string // 是否有效
	CreatedTime  string // 创建时间
	ModifiedTime string // 更新时间
}

// tUserCommentColumns holds the columns for table t_user_comment.
var tUserCommentColumns = TUserCommentColumns{
	Id:           "id",
	UserId:       "user_id",
	MasseurId:    "masseur_id",
	OrderId:      "order_id",
	Score:        "score",
	Label:        "label",
	Content:      "content",
	IsAppeal:     "is_appeal",
	Enabled:      "enabled",
	CreatedTime:  "created_time",
	ModifiedTime: "modified_time",
}

// NewTUserCommentDao creates and returns a new DAO object for table data access.
func NewTUserCommentDao() *TUserCommentDao {
	return &TUserCommentDao{
		group:   "default",
		table:   "t_user_comment",
		columns: tUserCommentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TUserCommentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TUserCommentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TUserCommentDao) Columns() TUserCommentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TUserCommentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TUserCommentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TUserCommentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
